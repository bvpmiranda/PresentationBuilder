@model PresentationBuilder.Models.PresentationViewModel
@{
    Layout = "~/Views/Shared/Internal.cshtml";

    ViewBag.Title = "Presentations Library";
}

<div class="row">

    <div class="col-sm-1 col-md-3 col-lg-5"></div>
    <div class="col-sm-4 col-md-3 col-lg-2">
        @if (Model.UserInfo != null && Model.UserInfo.PasswordHash != null)
        {
            // @Html.ActionLink("Change your password", "ChangePassword")
            @Html.ActionLink("Change Password", "ChangePassword", "Manage", null, new { @class = "btn btn-block btn-account" })
        }
        else
        {
            //@Html.ActionLink("Create", "SetPassword")
            @Html.ActionLink("Create Password", "SetPassword", "Manage", null, new { @class = "btn btn-block btn-account" })
        }
    </div>
    <div class="col-sm-5 col-md-4 col-lg-3">
        @Html.ActionLink("Manage External Logins", "ManageLogins", "Manage", null, new { @class = "btn btn-block btn-account" })
    </div>
    <div class="col-sm-2 col-md-2 col-lg-2">
        @using (Html.BeginForm("LogOff", "Account", FormMethod.Post, new { id = "logoutForm" }))
        {
            @Html.AntiForgeryToken()
            <a class="btn btn-block btn-account" href="javascript:document.getElementById('logoutForm').submit()">Log off</a>
        }
    </div>
</div>

<br />

<div class="text-center">
    <span class="title">Library</span>
</div>

<br />

<div class="row">
    <div class="col-sm-4 col-md-3 col-lg-3">
        <div class="importBox">
            <img src="~/Images/pdf.png" />
            <span class="title">Import a .pdf file</span>
            <br />
            <span class="subTitle">(up to 20 pages)</span>
        </div>
    </div>

    <div class="col-sm-2 col-md-1 col-lg-1"></div>

    <div class="col-sm-4 col-md-3 col-lg-3">
        <div class="importBox">
            <img src="~/Images/pdf.png" />
            <span class="title">Import a .zip file</span>
        </div>
    </div>

    <div class="col-sm-2 col-md-1 col-lg-1"></div>

    @{
        foreach (var presentation in Model.Presentations)
        {
            <div class="col-sm-4 col-md-3 col-lg-3">
                <div class="presentationBox">
                    <div class="gradient"></div>
                    <div class="name">
                        @presentation.Name
                        <br />
                        @presentation.Date.ToString("MM/dd/yyyy")
                    </div>
                    <div class="buttons">
                        <div class="row">
                            <div class="col-sm-3">
                                <a href="@Url.Action("Presentation", "Presentations", new { id = @presentation.PresentationId })" class="btn btn-sm">Edit</a>
                            </div>
                            <div class="col-sm-2">
                                <button type="button" class="btn btn-sm" onclick="Presentations.download( @presentation.PresentationId); return false;">
                                    <img src="~/Images/download.png" height="17" />
                                </button>
                            </div>
                            <div class="col-sm-2 col-sm-offset-1">
                                <a href="@Url.Action("Duplicate", "Presentations", new { id = @presentation.PresentationId })" class="btn btn-sm">
                                    <img src="~/Images/duplicate.png" height="17" />
                                </a>
                            </div>
                            <div class="col-sm-2 col-sm-offset-1">
                                <button type="button" class="btn btn-sm btn-del" onclick="Presentations.delete( @presentation.PresentationId); return false;">
                                    <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-sm-2 col-md-1 col-lg-1"></div>
        }
    }
</div>

<form action="~/Presentations/SaveUploadedFile" method="post" enctype="multipart/form-data" class="dropzone" id="dropzoneForm">
    <div class="fallback">
        <input name="file" type="file" multiple />
        <input type="submit" value="Upload" />
    </div>
</form>

@section scripts{

    <script type="text/javascript">
        $("#dropzoneDiv").on('click', function (e)
        {
            $("#dropzoneForm").click();
        });

        //File Upload response from the server
        Dropzone.options.dropzoneForm = {
            uploadMultiple: false,
            acceptedFiles: ".pdf",
            maxFiles: 1,
            previewTemplate: $("#dropzoneTemplate").html(),
            init: function ()
            {
                this.on("maxfilesexceeded", function (data)
                {
                    var res = eval('(' + data.xhr.responseText + ')');

                });
                this.on("complete", function (data)
                {

                    if (data.xhr.responseText != undefined)
                    {

                        var PresentationId = JSON.parse(data.xhr.responseText)["Message"];
                        //  result = jQuery.parseJSON(result);

                        //Navigation.navigate(    'Presentations/Presentation/' + PresentationId, null)

                        window.location = baseUrl + "Presentations/Presentation/" + PresentationId;
                    }
                });
            }
        };

    </script>
}


@*@section scripts{

        <script type="text/javascript">

            //File Upload response from the server
            Dropzone.options.dropzoneForm = {
                maxFiles: 1,
                init: function () {
                    this.on("maxfilesexceeded", function (data) {
                        var res = eval('(' + data.xhr.responseText + ')');

                    });
                    this.on("complete", function (data) {

                        var res = eval('(' + data.xhr.responseText + ')');

                        alert(res.Message);

                    });

                    this.on("addedfile", function (file) {

                        // Create the remove button
                        var removeButton = Dropzone.createElement("<button>Remove file</button>");


                        // Capture the Dropzone instance as closure.
                        var _this = this;

                        // Listen to the click event
                        removeButton.addEventListener("click", function (e) {
                            // Make sure the button click doesn't submit the form:
                            e.preventDefault();
                            e.stopPropagation();
                            // Remove the file preview.
                            _this.removeFile(file);
                            // If you want to the delete the file on the server as well,
                            // you can do the AJAX request here.
                        });

                        // Add the button to the file preview element.
                        file.previewElement.appendChild(removeButton);
                    });
                }
            };

        </script>
    }*@
