@model PresentationBuilder.Models.Presentation
@{
    Layout = "~/Views/Shared/Internal.cshtml";

    ViewBag.Title = "Presentation Editor - " + Model.PresentationId;
}
@section topButtons
{
    <a href="@Url.Action("Index", "Presentations")" class="topButton"><div class="text">Library</div></a>
    <div class="topButton selected"><div class="text">Create New</div></div>
}
<script src="~/Scripts/ckeditor/ckeditor.js"></script>
<style type="text/css">
    ul.thumbnails
    {
        overflow: auto;
        list-style-image: none;
        list-style-position: outside;
        list-style-type: none;
        padding: 0px;
        margin: 0px;
    }

        ul.thumbnails ul
        {
            overflow: auto;
            list-style-image: none;
            list-style-position: outside;
            list-style-type: none;
            padding: 0px;
            margin: 0px;
        }

        ul.thumbnails li.group_title
        {
            float: none;
        }

        ul.thumbnails id
        {
            margin: 0px 12px 12px 0px;
            float: left;
        }

        ul.thumbnails li .thumbnail
        {
            padding: 6px;
            border: 1px solid #dddddd;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
        }

            ul.thumbnails li .thumbnail img
            {
                -webkit-user-drag: none;
            }

            ul.thumbnails li .thumbnail.selected
            {
                background: #0088cc;
            }
</style>
@using (Html.BeginForm("AddPresentation", "Presentations", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    <div class="form-group">
        @Html.HiddenFor(m => m.PresentationId, new { @class = "form-control" })
        <div class="col-md-12">
            <h2>Presentation Name</h2>
        </div>
        <div class="row">
            <div class="col-sm-12 col-md-12 col-lg-12">
                @Html.TextBoxFor(m => m.Name, new { @class = "form-control", @type = "text" })
                @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 col-md-12 col-lg-12">
                DESCRIPTION
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 col-md-12 col-lg-12">
                @Html.TextAreaFor(m => m.Description, new { @class = "ckeditor", @id = "sampleEditor" })
            </div>
        </div>
    </div>

    <h2>PAGES</h2>
    <div class="row">
        <ul id="sortable" class="thumbnails" style="padding: 0px 15px;">
            @foreach (var presentation in @Model.PresentationPages.OrderBy(o => o.Order))
            {
                <id id="@(String.Format("presentationorder_{0}_{1}", presentation.PresentationPageId, presentation.Order))">
                    <li>
                        <div class="presentationPageBox">
                            <div class="pageImage">
                                <img src="~/image.ashx?Id=@presentation.PresentationPageId" alt="@presentation.ImagePath" style="cursor: move; height: inherit;" />
                            </div>
                            <div class="buttons">
                                @{
                if (presentation.SoundPath == null || presentation.SoundPath.Trim().Length == 0)
                {
                    <div class="button addAudio" onclick="changeAudio(@(presentation.PresentationPageId));"></div>
                }
                else
                {
                    <div class="button audioPlayer">
                        <div class="length">
                            @presentation.SoundLength.Value.ToString("n0")  @(presentation.SoundLength.Value == 1 ? "second" : "seconds")
                        </div>
                        <div class="audioButtons">
                            <div class="button changeAudio" onclick="changeAudio(@(presentation.PresentationPageId));"></div>
                            <div class="button deleteAudio" onclick="Presentations.deleteAudio(@presentation.PresentationPageId);"></div>
                        </div>
                    </div>
                }
                                }
                                <div class="button changePage" onclick="changePage(@(presentation.PresentationPageId))"></div>
                                <div class="button deletePage" onclick="Presentations.deletePage(@presentation.PresentationPageId);"></div>
                            </div>
                        </div>
                    </li>
                </id>
            }
        </ul>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" class="btn btn-default" value="Save Changes" />
        </div>
    </div>

}
@section Scripts {
    <script type="text/javascript">
        $('document').ready(function ()
        {
            $("#sortable").sortable({
                revert: true,
                stop: function (evt, ui)
                {

                    var newOrder = 1;

                    $("id").each(function ()
                    {

                        var valueSplit = $(this).context.id.split("_");

                        if (valueSplit.length == 3)
                        {
                            var idOrder = valueSplit[1];
                            ChangeOrder(idOrder, newOrder++);
                        }
                    });
                }
            });
        });

        function ChangeOrder(presentationPageIdValue, newOrderValue)
        {
            //var data = 'presentationPageId=' + presentationPageIdValue + '&newOrder=' + newOrderValue; // { presentationPageId: presentationPageIdValue, newOrder: newOrderValue };

            //var newbaseUrl + 'Presentations/ChangeOrder',

            var targeturl = '@Url.Action("ChangeOrder", "Presentations")?presentationPageId=' + presentationPageIdValue + '&newOrder=' + newOrderValue;

            $.ajax({
                type: "POST",
                url: targeturl,
                contentType: false,
                processData: false,
                success: function (result)
                {
                    //result = jQuery.parseJSON(result);

                    //if (result.uploadStatus === uploadStatus.success) {
                    //    //Presentations.fileUpload = Presentations.fileUpload.replaceWith(Presentations.fileUpload.val('').clone(true));

                    //    //Navigation.navigate('Presentations/Presentation/' + result.data.PresentationId, result.data.Name)
                    //}
                    //else {
                    //    alert('Erro: ' + result.message);
                    //}
                },
                error: function (xhr, status, p3, p4)
                {
                    var err = "Error " + " " + status + " " + p3 + " " + p4;
                    if (xhr.responseText && xhr.responseText[0] == "{")
                        err = JSON.parse(xhr.responseText).Message;
                    console.log(err);
                }
            });

        }

        //File Upload response from the server
        Dropzone.options.changeAudioForm = {
            url: function ()
            {
                return baseUrl + "Presentations/ChangeAudio/" + Dropzone.options.changeAudioForm.id
            },
            uploadMultiple: false,
            acceptedFiles: ".mp3,.wav",
            maxFiles: 1,
            init: function ()
            {
                this.on("maxfilesexceeded", function (data)
                {
                    var res = eval('(' + data.xhr.responseText + ')');
                });
                this.on("complete", function (data)
                {
                    if (data.xhr.responseText != undefined)
                    {
                        window.location.reload();
                    }
                });
            }
        };

        //File Upload response from the server
        Dropzone.options.changePageForm = {
            url: function ()
            {
                return baseUrl + "Presentations/ChangePage/" + Dropzone.options.changePageForm.id
            },
            uploadMultiple: false,
            acceptedFiles: ".jpg,.bmp,.png,.tiff,.jpeg",
            maxFiles: 1,
            init: function ()
            {
                this.on("maxfilesexceeded", function (data)
                {
                    var res = eval('(' + data.xhr.responseText + ')');
                });
                this.on("complete", function (data)
                {
                    if (data.xhr.responseText != undefined)
                    {
                        window.location.reload();
                    }
                });
            }
        };

        function changeAudio(id)
        {
            Dropzone.options.changeAudioForm.id = id;

            $("#changeAudioForm").click();
        }

        function changePage(id)
        {
            Dropzone.options.changePageForm.id = id;

            $("#changePageForm").click();
        }

    </script>
}

<form action="~/Presentations/ChangePage" method="post" enctype="multipart/form-data" class="dropzone" id="changePageForm">
    <div class="fallback">
        <input name="file" type="file" multiple />
        <input type="submit" value="Upload" />
    </div>
</form>

<form action="~/Presentations/ChangeAudio" method="post" enctype="multipart/form-data" class="dropzone" id="changeAudioForm">
    <div class="fallback">
        <input name="file" type="file" multiple />
        <input type="submit" value="Upload" />
    </div>
</form>
